# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from shutil import copyfile
import os
from EffectTree import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QGridLayout, QWidget, QPushButton, QHBoxLayout, QVBoxLayout, QLabel, \
    QSlider, QStyle, QSizePolicy, QFileDialog
import sys
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import effectFunctions

class MainStage(QWidget):
    def __init__(self, *args, **kwargs):
        super(MainStage, self).__init__(*args, **kwargs)

        self.width  = 1550
        self.height = 915

        self.grid = QGridLayout()
        #self.grid.setSpacing(10)

        self.setFixedSize(800, 400)

        self.move(200,100)

        w = QHBoxLayout()
        w.addLayout(self.grid)

        self.setLayout(w)

        self.show()

    def setGrid(self, effect_list):
        for i in range(0, len(effect_list)):
            (name, effect) = effect_list[i]
            n = Node(self, name)
            # label = QLabel(self)
            # label.setText(name)
            self.grid.addWidget(n, 1, i)

class Node(QWidget):
    def __init__(self, parent, name, *args, **kwargs):
        super(Node, self).__init__(parent, *args, **kwargs)
        self.height = 200
        self.width  = 200
        self.setFixedSize(self.width, self.height)
        self.name = name

        label = QLabel(self)
        label.setText(name)

        self.setStyleSheet("border: 3px solid black;")

    def paintEvent(self, event) -> None:
        painter = QPainter()
        painter.begin(self)
        rect    = event.rect()
        
        pen = QPen(Qt.blue)
        pen.setWidth(2)
        painter.setPen(pen)
        painter.drawLine(65, 10, 100, 10)
        painter.drawLine(100, 10, 90, 0)
        painter.drawLine(100, 10, 90, 20)
        painter.end()

class Ui_MainWindow(QWidget):
    filename = r"sample.wav"

    def __init__(self):
        super().__init__()
        self._buffer = QtCore.QBuffer()

        winIcon = QIcon("images/icon.png")
        MainWindow.setWindowIcon(winIcon)

    def setupUi(self, MainWindow):

        self.effect_list = []

        # Media Player Initialized
        self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)
        videowidget = QVideoWidget()
        videowidget.setGeometry(QtCore.QRect(200, 10, 871, 141))

    
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1920, 1080)
        MainWindow.setStyleSheet("background-image: url(\"images/pgmtexture.png\");\n")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.titleText = QtWidgets.QLabel(self.centralwidget)
        self.titleText.setGeometry(QtCore.QRect(30, 10, 151, 61))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.titleText.setFont(font)
        self.titleText.setTextFormat(QtCore.Qt.AutoText)
        self.titleText.setObjectName("titleText")
        MainWindow.setCentralWidget(self.centralwidget)

        self.mainStage = MainStage(self.centralwidget)
        self.mainStage.setGrid(self.effect_list)
        self.mainStage.update()
        
        self.playSlider = QtWidgets.QSlider(self.centralwidget)
        self.playSlider.setGeometry(QtCore.QRect(600, 20, 721, 41))
        self.playSlider.setOrientation(QtCore.Qt.Horizontal)
        self.playSlider.setObjectName("playSlider")
        self.playSlider.sliderMoved.connect(self.set_position)

        # Volume Adjuster to increase or lower volume
        self.volumeAdjuster = QtWidgets.QSlider(self.centralwidget)
        self.volumeAdjuster.setEnabled(True)
        self.volumeAdjuster.setGeometry(QtCore.QRect(990, 340, 31, 201))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.volumeAdjuster.setFont(font)
        self.volumeAdjuster.setSliderPosition(50)
        self.volumeAdjuster.setOrientation(QtCore.Qt.Vertical)
        self.volumeAdjuster.setObjectName("volumeAdjuster")
        self.volumeLabel = QtWidgets.QLabel(self.centralwidget)
        self.volumeLabel.setGeometry(QtCore.QRect(970, 50, 61, 21))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.volumeLabel.setFont(font)
        self.volumeLabel.setObjectName("volumeLabel")

        # # Filename text box
        # self.file_textbox = QLabel(self.centralwidget)
        # self.file_textbox.setText("No file selected.")
        # self.file_textbox.setGeometry(0, 0, 9000, 300)

        # # Reverb button
        # self.reverb_btn = QPushButton('Reverb', self.centralwidget)
        # #self.reverb_btn.clicked.connect(self.add_reverb)
        # self.reverb_btn.clicked.connect(lambda: self.changeEffectText(1))
        # self.reverb_btn.setGeometry(30, 300, 125, 125)
        # self.reverb_btn.setStyleSheet("border-radius: 25px;\n"
        #                               "background: #73AD21;\n"
        #                               "padding: 20px;\n"
        #                               "width: 200px;\n"
        #                               "height: 150px;\n"
        #                               "background-image: url(\"images/btntexture.png\");")

        # # Distort Button
        # self.distort_btn = QPushButton('Distortion', self.centralwidget)
        # #self.distort_btn.clicked.connect(distortion)
        # self.distort_btn.clicked.connect(lambda: self.changeEffectText(2))
        # self.distort_btn.move(50, 55)
        # self.distort_btn.setGeometry(210, 300, 125, 125)
        # self.distort_btn.setStyleSheet("border-radius: 25px;\n"
        #                                "background: #73AD21;\n"
        #                                "padding: 20px;\n"
        #                                "width: 200px;\n"
        #                                "height: 150px;\n"
        #                                "background-image: url(\"images/btntexture.png\");")

        # # Effect text box
        # # png for background needs to be improved.
        # self.effect_Textbox = QLabel(self.centralwidget, wordWrap=True)
        # self.effect_Textbox.setText("This is an example. ")
        # self.effect_Textbox.setGeometry(9, 600, 350, 400)
        # self.effect_Textbox.setAlignment(QtCore.Qt.AlignLeft)
        # self.effect_Textbox.setStyleSheet("border: 3px solid black;\n"
        #                                   "background-image: url(\"images/effectTextbg.png\");")


        # # Apply Button generates the modified file.
        # self.applyButton = QtWidgets.QPushButton("Apply", self.centralwidget)
        # self.applyButton.setGeometry(400, 200, 181, 71)
        # self.applyButton.setFont(font)
        # self.applyButton.setObjectName("applyEffect")
        # self.applyButton.clicked.connect(self.applyEffect)

        # # Upload, load, and save files.

        self.addReverb = QtWidgets.QPushButton(self.centralwidget)
        self.addReverb.setGeometry(QtCore.QRect(30, 100, 181, 71))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.addReverb.setFont(font)
        self.addReverb.setObjectName("addReverb")
        self.addReverb.clicked.connect(self.add_reverb)

        self.addDelay = QtWidgets.QPushButton("Add Delay", self.centralwidget)
        self.addDelay.setGeometry(QtCore.QRect(30, 200, 181, 71))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.addDelay.setFont(font)
        self.addDelay.setObjectName("addDelay")
        self.addDelay.clicked.connect(self.add_delay)

        self.addDistortion = QtWidgets.QPushButton("Add Distortion", self.centralwidget)
        self.addDistortion.setGeometry(QtCore.QRect(30, 300, 181, 71))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.addDistortion.setFont(font)
        self.addDistortion.setObjectName("addDistortion")
        self.addDistortion.clicked.connect(self.add_distortion)

        self.addChorus = QtWidgets.QPushButton("Add Chorus", self.centralwidget)
        self.addChorus.setGeometry(QtCore.QRect(30, 400, 181, 71))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.addChorus.setFont(font)
        self.addChorus.setObjectName("addChorus")
        self.addChorus.clicked.connect(self.add_chorus)

        self.applyButton = QtWidgets.QPushButton("Apply Effect", self.centralwidget)
        self.applyButton.setGeometry(QtCore.QRect(30, 510, 181, 71))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.applyButton.setFont(font)
        self.applyButton.clicked.connect(self.applyEffect)

        self.remove_All = QtWidgets.QPushButton("Remove All", self.centralwidget)
        self.remove_All.setGeometry(QtCore.QRect(220, 510, 181, 71))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.remove_All.setFont(font)
        self.remove_All.setObjectName("Remove All")
        self.remove_All.clicked.connect(self.removeAll)

        self.remove_Last = QtWidgets.QPushButton("Remove Last", self.centralwidget)
        self.remove_Last.setGeometry(QtCore.QRect(410, 510, 181, 71))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.remove_Last.setFont(font)
        self.remove_Last.setObjectName("Remove Last")
        self.remove_Last.clicked.connect(self.removeLast)

        self.playButton = QtWidgets.QPushButton(self.centralwidget)
        self.playButton.setEnabled(False)
        self.playButton.setGeometry(QtCore.QRect(210, 30, 75, 23))
        self.playButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.playButton.setObjectName("playButton")
        self.playButton.clicked.connect(self.play_video)
        MainWindow.setCentralWidget(self.centralwidget)


        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1091, 21))
        self.menubar.setObjectName("menubar")

        # Save or Load a file.
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")

        # Upload a file.
        self.menuUpload = QtWidgets.QMenu(self.menubar)
        self.menuUpload.setObjectName("menuUpload")

        MainWindow.setMenuBar(self.menubar)


        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionLoad = QtWidgets.QAction(MainWindow)
        self.actionLoad.setObjectName("actionLoad")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionUpload_File = QtWidgets.QAction(MainWindow)
        self.actionUpload_File.setObjectName("actionUpload_File")

        
        self.actionSave.triggered.connect(self.save_file)

        self.menuFile.addAction(self.actionLoad)
        self.menuFile.addAction(self.actionSave)
        self.menuUpload.addAction(self.actionUpload_File)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuUpload.menuAction())


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.actionUpload_File.triggered.connect(self.open_file)


        # create hbox layout
        hboxLayout = QHBoxLayout()
        hboxLayout.setContentsMargins(0, 0, 0, 0)

        # set widgets to the hbox layout
        hboxLayout.addWidget(self.playButton)
        hboxLayout.addWidget(self.playSlider)

        vboxLayout = QVBoxLayout()
        vboxLayout.addWidget(videowidget)
        vboxLayout.addLayout(hboxLayout)

        self.mediaPlayer.stateChanged.connect(self.mediastate_changed)
        self.mediaPlayer.positionChanged.connect(self.position_changed)
        self.mediaPlayer.durationChanged.connect(self.duration_changed)

        # self._buffer = QtCore.QBuffer()

        # Changes a label to display what an effect does when clicked.


    # When a button is clicked, changes the effect.
    def changeEffectText(self, func):
        reverb = "Reverb\nThis creates a resounding effect " \
                 "that simulates a resonance of sound off of a surface."

        distortion = "Distortion\nThis creates an effect that simulates" \
                     "a sine-wave of data being modified in a particular" \
                     "direction."
        if func == 1:
            self.effect_Textbox.setText(reverb)
        elif func == 2:
            self.effect_Textbox.setText(distortion)
        else:
            self.effect_Textbox.setText("Error")


    # Used for displays on the output.
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        self.volumeLabel.setText(_translate("MainWindow", "Volume"))
        self.addReverb.setText(_translate("MainWindow", "Add Reverb"))
        self.playButton.setText(_translate("MainWindow", "Play"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuUpload.setTitle(_translate("MainWindow", "Upload"))
        self.actionLoad.setText(_translate("MainWindow", "Load"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionUpload_File.setText(_translate("MainWindow", "Upload File"))


    def open_file(self):
        filename, ok = QtWidgets.QFileDialog.getOpenFileName(
            self, filter='WAV Files (*.wav)')

        if ok:
            f = open('tmpfile.wav', 'wb')
            k = open(filename, 'rb')
            f.write(k.read())
            k.close()
            f.close()
            
            f = open('original.wav', 'wb')
            k = open(filename, 'rb')
            f.write(k.read())
            k.close()
            f.close()
            self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(filename)))
            self.playButton.setEnabled(True)

    def save_file(self):
        name = QtWidgets.QFileDialog.getSaveFileName(self, 'Save File')
        
        file = open(name[0]+'.wav','wb')
        file2 = open(r'tmpfile.wav', 'rb')
        file.write(file2.read())


    def update_player(self):
        self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile('tmpfile.wav')))
        

    

    def play_video(self):
        if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            self.mediaPlayer.pause()

        else:
            self.mediaPlayer.play()

    def set_position(self, position):
        self.mediaPlayer.setPosition(position)

    def mediastate_changed(self, state):
        if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            self.playButton.setIcon(
                self.style().standardIcon(QStyle.SP_MediaPause)

            )

        else:
            self.playButton.setIcon(
                self.style().standardIcon(QStyle.SP_MediaPlay)

            )

    def position_changed(self, position):
        self.playSlider.setValue(position)

    def duration_changed(self, duration):
        self.playSlider.setRange(0, duration)

    def delay_simple(self):
        effectFunctions.add_delay(1.2, 1.6, 0.8, 0.9)
        effectFunctions.remove()

    def add_delay(self):
        self.effect_list.append(("delay", self.delay_simple))
        self.updateGrid()

    def chorus_simple(self):
        effectFunctions.add_chorus(2, 4, 0.25, 0.8)
        effectFunctions.remove()

    def add_chorus(self):
        self.effect_list.append(("chorus", self.chorus_simple))
        self.updateGrid()

    def distortion_simple(self):
        effectFunctions.add_distortion(0.6, 0.7)
        effectFunctions.remove()

    def add_distortion(self):
        self.effect_list.append(("distortion", self.distortion_simple))
        self.updateGrid()

    def reverb_simple(self):
        effectFunctions.add_reverb(1000, 5, 2)
        effectFunctions.remove()

    def add_reverb(self):
        self.effect_list.append(("reverb", self.reverb_simple))
        self.updateGrid()
        
    def applyEffect(self):
        self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile('sample_distorted.wav')))
        os.remove('tmpfile.wav')
        copyfile("original.wav", 'tmpfile.wav')
        for (name, effect) in self.effect_list:
            effect()
        self.update_player()

    def removeLast(self):
        self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile('sample_distorted.wav')))
        if self.effect_list != []:
            self.effect_list.pop()
        self.updateGrid()
        self.update_player()

    def removeAll(self):
        self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile('sample_distorted.wav')))
        self.effect_list = []
        self.updateGrid()
        self.update_player()

    def updateGrid(self):
        if self.mainStage:
            self.mainStage.setParent(None)
        self.mainStage = MainStage(self.centralwidget)
        self.mainStage.setGrid(self.effect_list)
        self.mainStage.update()
        self.mainStage.lower()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
